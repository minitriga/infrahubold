/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/schema/": {
    /** Get Schema */
    get: operations["get_schema_schema__get"];
  };
  "/schema/load/": {
    /** Load Schema */
    post: operations["load_schema_schema_load__post"];
  };
  "/config/": {
    /** Get Config */
    get: operations["get_config_config__get"];
  };
  "/info/": {
    /** Get Info */
    get: operations["get_info_info__get"];
  };
  "/rfile/{rfile_id}": {
    /** Generate Rfile */
    get: operations["generate_rfile_rfile__rfile_id__get"];
  };
  "/query/{query_id}": {
    /** Graphql Query */
    get: operations["graphql_query_query__query_id__get"];
  };
  "/transform/{transform_url}": {
    /** Transform Python */
    get: operations["transform_python_transform__transform_url__get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /**
     * AnalyticsSettings
     * @description Base class for settings, allowing values to be overridden by environment variables.
     *
     * This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
     * Heroku and any 12 factor app design.
     */
    AnalyticsSettings: {
      /**
       * Enable
       * @default true
       */
      enable?: boolean;
      /** Address */
      address?: string;
      /** Api Key */
      api_key?: string;
    };
    /** AttributeSchema */
    AttributeSchema: {
      /** Name */
      name: string;
      /** Kind */
      kind: string;
      /** Label */
      label?: string;
      /** Description */
      description?: string;
      /** Default Value */
      default_value?: Record<string, never>;
      /** Enum */
      enum?: (Record<string, never>)[];
      /** Regex */
      regex?: string;
      /** Max Length */
      max_length?: number;
      /** Min Length */
      min_length?: number;
      /**
       * Inherited
       * @default false
       */
      inherited?: boolean;
      /**
       * Unique
       * @default false
       */
      unique?: boolean;
      /**
       * Branch
       * @default true
       */
      branch?: boolean;
      /**
       * Optional
       * @default false
       */
      optional?: boolean;
    };
    /** ConfigAPI */
    ConfigAPI: {
      main: components["schemas"]["MainSettings"];
      logging: components["schemas"]["LoggingSettings"];
      analytics: components["schemas"]["AnalyticsSettings"];
    };
    /** FilterSchema */
    FilterSchema: {
      /** Name */
      name: string;
      kind: components["schemas"]["FilterSchemaKind"];
      /** Enum */
      enum?: (Record<string, never>)[];
      /** Object Kind */
      object_kind?: string;
      /** Description */
      description?: string;
    };
    /**
     * FilterSchemaKind
     * @description An enumeration.
     * @enum {string}
     */
    FilterSchemaKind: "Text" | "Number" | "Boolean" | "Object" | "MultiObject" | "Enum";
    /**
     * GenericSchema
     * @description A Generic can be either an Interface or a Union depending if there are some Attributes or Relationships defined.
     */
    GenericSchema: {
      /** Name */
      name: string;
      /** Kind */
      kind: string;
      /** Description */
      description?: string;
      /** Default Filter */
      default_filter?: string;
      /** Display Labels */
      display_labels?: (string)[];
      /** Attributes */
      attributes?: (components["schemas"]["AttributeSchema"])[];
      /** Relationships */
      relationships?: (components["schemas"]["RelationshipSchema"])[];
      /**
       * Branch
       * @default true
       */
      branch?: boolean;
      /** Label */
      label?: string;
      /** Used By */
      used_by?: (string)[];
    };
    /** GroupSchema */
    GroupSchema: {
      /** Name */
      name: string;
      /** Kind */
      kind: string;
      /** Description */
      description?: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: (components["schemas"]["ValidationError"])[];
    };
    /** InfoAPI */
    InfoAPI: {
      /** Deployment Id */
      deployment_id: string;
      /** Version */
      version: string;
    };
    /**
     * LoggingSettings
     * @description Base class for settings, allowing values to be overridden by environment variables.
     *
     * This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
     * Heroku and any 12 factor app design.
     */
    LoggingSettings: {
      /**
       * Remote
       * @default {
       *   "enable": false
       * }
       */
      remote?: components["schemas"]["RemoteLoggingSettings"];
    };
    /**
     * MainSettings
     * @description Base class for settings, allowing values to be overridden by environment variables.
     *
     * This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
     * Heroku and any 12 factor app design.
     */
    MainSettings: {
      /**
       * Default Branch
       * @default main
       */
      default_branch?: string;
      /**
       * Internal Address
       * @default http://localhost:8000
       */
      internal_address?: string;
    };
    /** NodeExtensionSchema */
    NodeExtensionSchema: {
      /** Kind */
      kind: string;
      /** Attributes */
      attributes?: (components["schemas"]["AttributeSchema"])[];
      /** Relationships */
      relationships?: (components["schemas"]["RelationshipSchema"])[];
    };
    /** NodeSchema */
    NodeSchema: {
      /** Name */
      name: string;
      /** Kind */
      kind: string;
      /** Description */
      description?: string;
      /** Default Filter */
      default_filter?: string;
      /** Display Labels */
      display_labels?: (string)[];
      /** Attributes */
      attributes?: (components["schemas"]["AttributeSchema"])[];
      /** Relationships */
      relationships?: (components["schemas"]["RelationshipSchema"])[];
      /** Label */
      label?: string;
      /** Inherit From */
      inherit_from?: (string)[];
      /** Groups */
      groups?: (string)[];
      /**
       * Branch
       * @default true
       */
      branch?: boolean;
      /** Filters */
      filters?: (components["schemas"]["FilterSchema"])[];
    };
    /**
     * RelationshipCardinality
     * @description An enumeration.
     * @enum {string}
     */
    RelationshipCardinality: "one" | "many";
    /**
     * RelationshipKind
     * @description An enumeration.
     * @enum {string}
     */
    RelationshipKind: "Generic" | "Attribute" | "Component" | "Parent";
    /** RelationshipSchema */
    RelationshipSchema: {
      /** Name */
      name: string;
      /** Peer */
      peer: string;
      /** @default Generic */
      kind?: components["schemas"]["RelationshipKind"];
      /** Label */
      label?: string;
      /** Description */
      description?: string;
      /** Identifier */
      identifier?: string;
      /**
       * Inherited
       * @default false
       */
      inherited?: boolean;
      /** @default many */
      cardinality?: components["schemas"]["RelationshipCardinality"];
      /**
       * Branch
       * @default true
       */
      branch?: boolean;
      /**
       * Optional
       * @default true
       */
      optional?: boolean;
      /** Filters */
      filters?: (components["schemas"]["FilterSchema"])[];
    };
    /**
     * RemoteLoggingSettings
     * @description Base class for settings, allowing values to be overridden by environment variables.
     *
     * This is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose),
     * Heroku and any 12 factor app design.
     */
    RemoteLoggingSettings: {
      /**
       * Enable
       * @default false
       */
      enable?: boolean;
      /** Frontend Dsn */
      frontend_dsn?: string;
      /** Api Server Dsn */
      api_server_dsn?: string;
      /** Git Agent Dsn */
      git_agent_dsn?: string;
    };
    /** SchemaExtension */
    SchemaExtension: {
      /** Nodes */
      nodes?: (components["schemas"]["NodeExtensionSchema"])[];
    };
    /** SchemaLoadAPI */
    SchemaLoadAPI: {
      /** Version */
      version: string;
      /** Generics */
      generics?: (components["schemas"]["GenericSchema"])[];
      /** Nodes */
      nodes?: (components["schemas"]["NodeSchema"])[];
      /** Groups */
      groups?: (components["schemas"]["GroupSchema"])[];
      /**
       * Extensions
       * @default {
       *   "nodes": []
       * }
       */
      extensions?: components["schemas"]["SchemaExtension"];
    };
    /** SchemaReadAPI */
    SchemaReadAPI: {
      /** Nodes */
      nodes: (components["schemas"]["NodeSchema"])[];
      /** Generics */
      generics: (components["schemas"]["GenericSchema"])[];
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  get_schema_schema__get: {
    /** Get Schema */
    parameters: {
      query: {
        branch?: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SchemaReadAPI"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  load_schema_schema_load__post: {
    /** Load Schema */
    parameters: {
      query: {
        branch?: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SchemaLoadAPI"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  get_config_config__get: {
    /** Get Config */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigAPI"];
        };
      };
    };
  };
  get_info_info__get: {
    /** Get Info */
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["InfoAPI"];
        };
      };
    };
  };
  generate_rfile_rfile__rfile_id__get: {
    /** Generate Rfile */
    parameters: {
      query: {
        branch?: string;
        at?: string;
        rebase?: boolean;
      };
      path: {
        rfile_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/plain": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  graphql_query_query__query_id__get: {
    /** Graphql Query */
    parameters: {
      query: {
        branch?: string;
        at?: string;
        rebase?: boolean;
      };
      path: {
        query_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  transform_python_transform__transform_url__get: {
    /** Transform Python */
    parameters: {
      query: {
        branch?: string;
        at?: string;
        rebase?: boolean;
      };
      path: {
        transform_url: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
